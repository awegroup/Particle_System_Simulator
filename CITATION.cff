@masterthesis{batchelorDevelopmentBenchmarkingParticle2023,
  title = {Development and Benchmarking of a Particle System Framework for Structural Modeling of Soft-Wing Kites},
  author = {Batchelor, Alexander},
  year = {2023},
  urldate = {2023-12-01},
  school = {Delf University of Technology},
  type = {Master's thesis},
  URL = {http://resolver.tudelft.nl/uuid:42bd7d60-de62-4e11-ad73-5468144aaf59},
  abstract = {The Airborne Wind Energy industry is evolving rapidly, aiming to establish its position among the major players in the conventional renewable energy sector. Since this industry is relatively young, it faces various challenges with scaling and integration into society. One aspect that can be improved is the design process of soft-wing kites. The aim is to shift from design iterations based on experience-based hardware modifications and experimental testing to design iterations based on optimization strategies using computational simulations. For optimization-based design to be a feasible option, it requires computationally efficient underlying models. This report presents the results of thesis research that aimed to develop a fast and reasonably accurate framework for structural modeling of soft-wing kites and connected tethers.\&lt;br/\&gt;\&lt;br/\&gt;Deformation of leading-edge inflatable kites is essential for steering and controlling aerodynamic loads. Modeling of deformation is therefore indispensable, resulting in a highly non-linear fluid-structure interaction problem. Currently, a particle system model (PSM) is the preferred choice for modeling soft-wing kites because it can simulate deformations while converging faster than other methods. The existing PSM code in Java is outdated and the current academic preference has switched to developing in Python. This led to the central research question: ``Can the PSM be implemented in Python, using a\&lt;br/\&gt;mix of Object-Oriented (OO) and non-OO programming techniques, to efficiently predict deformation?''.\&lt;br/\&gt;\&lt;br/\&gt;While a framework was implemented based on the original Java code, it was also investigated whether it is possible to modify the solution-finding method for the structural model to improve convergence times without loss of accuracy. The aeroelastic problem can be simplified into a series of form-finding problems by assuming a quasi-steady flow. Three main families of form-finding methodologies are presented that are capable of finding solutions. Based on their properties and computational efficiency, the kinetic damping algorithm was selected as having the most potential for improving the current particle system implementation.\&lt;br/\&gt;The kinetic algorithm was originally developed for a dynamic relaxation method that used an explicit integration scheme. Kinetic damping has never been combined with an implicit integration scheme. Slight adjustments needed to be made to the algorithm's implementation as the current particle system\&lt;br/\&gt;employs an implicit scheme. Analysis of verification tests revealed characteristics of the utilized implicit Euler scheme. One notable effect was numerical damping, which hurt the performance of the kinetic damping algorithm. It was discovered that the algorithm's performance was more consistent by disabling the quadratic correction.\&lt;br/\&gt;\&lt;br/\&gt;Validation testing showed that each method is capable of accurately predicting the shape of tether and bridle line systems. To accurately simulate the deformation of membranes, more consideration must be given to the development of the PSM that represents the considered membrane continuum.\&lt;br/\&gt;Next, the runtimes of the self-coded solver with explicit computation of Jacobian matrices and the framework with kinetic damping algorithm were compared to the performance of a black-box solver. It was found that the framework outperformed a black-box solver in runtime, demonstrating the advantage of\&lt;br/\&gt;using the self-coded solver. Finally, benchmarking results indicated that the modified kinetic damping algorithm, despite some limitations, generally improved runtimes. Further investigation of the scaling of the runtime against increasing amounts of DOF indicated that the current framework could be fast enough for simulation in the range of 15 to 60 particles, despite the framework's current non-optimized state.},
}
